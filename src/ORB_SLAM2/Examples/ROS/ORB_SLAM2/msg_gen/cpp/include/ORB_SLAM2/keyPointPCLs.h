/* Auto-generated by genmsg_cpp for file /home/ipluto/Vitus-Core/src/ORB_SLAM2/Examples/ROS/ORB_SLAM2/msg/keyPointPCLs.msg */
#ifndef ORB_SLAM2_MESSAGE_KEYPOINTPCLS_H
#define ORB_SLAM2_MESSAGE_KEYPOINTPCLS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ORB_SLAM2
{
template <class ContainerAllocator>
struct keyPointPCLs_ {
  typedef keyPointPCLs_<ContainerAllocator> Type;

  keyPointPCLs_()
  : size(0)
  , ptX()
  , ptY()
  , rightY()
  , mDepth()
  {
  }

  keyPointPCLs_(const ContainerAllocator& _alloc)
  : size(0)
  , ptX(_alloc)
  , ptY(_alloc)
  , rightY(_alloc)
  , mDepth(_alloc)
  {
  }

  typedef uint32_t _size_type;
  uint32_t size;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ptX_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  ptX;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ptY_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  ptY;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rightY_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  rightY;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _mDepth_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  mDepth;


  typedef boost::shared_ptr< ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator>  const> ConstPtr;
}; // struct keyPointPCLs
typedef  ::ORB_SLAM2::keyPointPCLs_<std::allocator<void> > keyPointPCLs;

typedef boost::shared_ptr< ::ORB_SLAM2::keyPointPCLs> keyPointPCLsPtr;
typedef boost::shared_ptr< ::ORB_SLAM2::keyPointPCLs const> keyPointPCLsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ORB_SLAM2

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6ead73404bcb61395bff533d321119c5";
  }

  static const char* value(const  ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6ead73404bcb6139ULL;
  static const uint64_t static_value2 = 0x5bff533d321119c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ORB_SLAM2/keyPointPCLs";
  }

  static const char* value(const  ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 size\n\
float32[] ptX\n\
float32[] ptY\n\
float32[] rightY\n\
float32[] mDepth\n\
\n\
";
  }

  static const char* value(const  ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.size);
    stream.next(m.ptX);
    stream.next(m.ptY);
    stream.next(m.rightY);
    stream.next(m.mDepth);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct keyPointPCLs_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ORB_SLAM2::keyPointPCLs_<ContainerAllocator> & v) 
  {
    s << indent << "size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.size);
    s << indent << "ptX[]" << std::endl;
    for (size_t i = 0; i < v.ptX.size(); ++i)
    {
      s << indent << "  ptX[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ptX[i]);
    }
    s << indent << "ptY[]" << std::endl;
    for (size_t i = 0; i < v.ptY.size(); ++i)
    {
      s << indent << "  ptY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ptY[i]);
    }
    s << indent << "rightY[]" << std::endl;
    for (size_t i = 0; i < v.rightY.size(); ++i)
    {
      s << indent << "  rightY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rightY[i]);
    }
    s << indent << "mDepth[]" << std::endl;
    for (size_t i = 0; i < v.mDepth.size(); ++i)
    {
      s << indent << "  mDepth[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mDepth[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ORB_SLAM2_MESSAGE_KEYPOINTPCLS_H

